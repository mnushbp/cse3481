NOT FINISHED - A MAY BE INCORRECT

6) p146

#1

a) This is essentially the same as the simplified DES-like algorithm discussed earlier in the chapter.

Start with MnMn+1. Switch right and left to obtain Mn+1Mn. Now, use the same procedure as used in encryption (no
need to use keys in reverse order as there is only one key) until M1M0 is obtained. Re-swap the halves,
resulting in M0M1, which is the original plaintext.

Proof: The first step takes Mn+1Mn and gives the output [Mn] [Mn+1 ^ f(Mn, K)].
We know from the encryption procedure that Mn = Mn+1-1 and Mn+1  = Mn ^ f(Mn+1-1, K).
Therefore,

[Mn][Mn+1] ^ f(Mn, K)] = [Mn+1-1][Mn-1 ^ f(Mn+1-1, K) ^ f(Mn, K) = [Mn+1-1][Mn-1]

The last equality again used Mn = Mn+1-1, so that f(Mn+1-1, K) ^ f(Mn, K) is 0.

Similarly, the second step of decryption sends Mn+1-1Mn-1 to Mn+1-2Mn-2.

Continuing, we see that the decryption process leads us back to M1M0. Switching the left and right halves, we 
obtain the original plaintext M0M1 as desired.

b) i) Assuming we know the process used to encrypt the ciphertext, yes. Cryptanalytically, we can look at the
equations used for encryption and find parts of the plaintext from a two-round encryption.

given plaintext m0m1
and encryption function mj+2 = mj ^ f(K, mj+1)
and key function f = K ^ mj+1
we discover:

m0 = m0
m1 = m1
m2 = m0 ^ (k ^ m1)
m3 = m1 ^ (k ^ m2)

note that xor is associative, therefore

m2 = m0 ^ k ^ m1
m3 = m1 ^ k ^ m2

if we xor m2 and m3, we have

m2 ^ m3 = (m0 ^ k ^ m1) ^ (m1 ^ k ^ m2), which is by associativity m0 ^ k ^ m1 ^ m1 ^ k ^ m2

Since we know x ^ x = 0, and x ^ 0 = x, through some rearranging of the equation we arrive at

m2 ^ m3 = m0 ^ m2

Therefore m0 = m3. We now have half of the plaintext. Now simply refocus n bits down the CT and repeat the process,
with the old m3 = new m2 and the next n bits in the ciphertext serving as m3. This will reveal the content of the old
m1 (in the new equation, m0). Now that we have both m0 and m1, we can solve for k, and thus we know the plaintext and
the key.

ii) Similar to i), only now all we have to do is solve for k using either the equation for m2 or m3.


c) Given three rounds, we end up with the equations for m0...m4 as:

m0 = m0
m1 = m1
m2 = m0 ^ k ^ m1
m3 = m1 ^ k ^ m2 = m1 ^ k ^ m0 ^ k ^ m1 = m0
m4 = m2 ^ k ^ m3 = m0 ^ k ^ m1 ^ k ^ m1 ^ k ^ m2 = m0 ^ k ^ m2

and m3 ^ m4 = m0 ^ m4 = m0 ^ m0 ^ k ^ m2
so m3 ^ m4 = k ^ m2

Again, from the equation for m3 we already know m0. While this is not as simple to cryptanalytically attack as a
2-round encryption, it dramatically diminishes the keyspace, as now it is only necessary to exhaustively attack
all keys that, when xored with m2 and m3, equal m4. At the very least, in cases using the wrong key, the execution
time is cut by 40%.





