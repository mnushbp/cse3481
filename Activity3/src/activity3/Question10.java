package activity3;

import java.math.BigInteger;
import java.security.KeyFactory;
import java.security.interfaces.RSAPrivateKey;
import java.security.spec.RSAPrivateKeySpec;

import javax.crypto.Cipher;

/*
 * Bob has the an RSA public key with the following exponent e and modulus n:

  e = 74327
  n =
      94587468335128982981605019776781234618384857805657005686084562260910788622013722
      07092649169084385369007124813013442783232496672858253283236322154223178706820376
      30270674000828353944598575250177072847684118190067762114937353265007829546216602
      56501187035611332577696332459049538105669711385995976912007767106063
(For clarity, we write big numbers like n on multiple lines but it is in fact a single big integer.) 

Alice wants to send a secret message to Bob so she encrypts it with his public key and sends him the following big integer ciphertext:
  c =
      10870101966939556606443697147757930290262227730644958783498257036423105365610629
      52991052582846432979261500260278236678653125327546335884041286783340625646715334
      51395019521734099553221296896703454456327755743017818003765454489903326085581032
      66831217073027652061091790342124418143422318965525239492387183438956
You intercept this ciphertext. You also find out (from the consultant who helped Bob generate his RSA prime numbers p and q) that p is the following big integer:
  p =
      10358344307803887695931304169230543785620607743682421994532795393937342395753127
      888522373061586445417642355843316524942445924294144921649080401518286829171
Using this information, determine Alice's secret message. 
 */

public class Question10 {
	
	public static void main(String args[]) throws Exception{
		
		BigInteger e = new BigInteger("74327");
		BigInteger n = new BigInteger("94587468335128982981605019776781234618384857805657005686084562260910788622013722" +
		"07092649169084385369007124813013442783232496672858253283236322154223178706820376" +
		"30270674000828353944598575250177072847684118190067762114937353265007829546216602" +
		"56501187035611332577696332459049538105669711385995976912007767106063");
		BigInteger c = new BigInteger("10870101966939556606443697147757930290262227730644958783498257036423105365610629" +
		"52991052582846432979261500260278236678653125327546335884041286783340625646715334" +
		"51395019521734099553221296896703454456327755743017818003765454489903326085581032" +
		"66831217073027652061091790342124418143422318965525239492387183438956");
		BigInteger p = new BigInteger("10358344307803887695931304169230543785620607743682421994532795393937342395753127" +
		"888522373061586445417642355843316524942445924294144921649080401518286829171");

		BigInteger q = n.divide(p);
		
		BigInteger qminus = q.subtract(new BigInteger("1"));
		BigInteger pminus = p.subtract(new BigInteger("1"));
		
		BigInteger d = e.modInverse(qminus.multiply(pminus));
		
		KeyFactory factory = KeyFactory.getInstance("RSA");
		RSAPrivateKeySpec priv = new RSAPrivateKeySpec(n, d);
		RSAPrivateKey key = (RSAPrivateKey) factory.generatePrivate(priv);
		
		Cipher cipher = Cipher.getInstance("RSA/ECB/NoPadding");
		cipher.init(Cipher.DECRYPT_MODE, key);
		
		byte[] pt = cipher.doFinal(c.toByteArray());
		
		for(byte b : pt) {
			if (b != 0)
			    System.out.print( (char) b);
		}
		System.out.println();
		
	}

}
